{"version":3,"sources":["Components/usercard/usercard.js","Components/usergallery/usergallery.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","props","className","src","picUrl","firstName","lastName","email","UserGallery","componentDidMount","fetchUsers","pageToFetch","state","currentPage","url","setLoading","fetch","method","then","response","json","result","prevUsers","users","data","setState","catch","error","status","isLoading","render","map","user","key","id","avatar","first_name","last_name","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"iUAkBeA,G,YAfE,SAACC,GAEd,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,WAAWC,IAAKF,EAAMG,SAErC,8BACKH,EAAMI,UADX,IACuBJ,EAAMK,UAG7B,kCAAQL,EAAMM,MAAd,QCyEGC,E,kDAhFX,WAAYP,GAAQ,IAAD,8BACnB,cAAMA,IASNQ,kBAAoB,WAChB,EAAKC,cAXU,EAcnBA,WAAa,WACT,IAAMC,EAAc,EAAKC,MAAMC,YAAa,EAEtCC,EAAG,2CAAuCH,GAEhD,EAAKI,YAAW,GAEhBC,MAAMF,EAAK,CACPG,OAAO,QAEVC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,IAAMC,EAAS,sBAAO,EAAKV,MAAMW,OAAlB,YAA4BF,EAAOG,OAElD,EAAKC,SAAS,CACVF,MAAOD,EACPT,YAAaF,IAGjB,EAAKI,YAAW,MAEnBW,OAAM,SAACC,GACJ,EAAKZ,YAAW,OAtCL,EA0CnBA,WAAa,SAACa,GACV,EAAKH,SAAS,CACVI,UAAUD,KA5CC,EAiDnBE,OAAS,WACL,OACI,yBAAK5B,UAAU,aACX,uBAAGA,UAAU,SAAQ,4CAErB,yBAAKA,UAAU,aACV,EAAKU,MAAMW,MAAMQ,KAAI,SAACC,GACnB,OACI,kBAAC,EAAD,CACIC,IAAKD,EAAKE,GACV9B,OAAS4B,EAAKG,OACd9B,UAAW2B,EAAKI,WAChB9B,SAAU0B,EAAKK,UACf9B,MAAOyB,EAAKzB,YAM3B,EAAKK,MAAMiB,UAClB,0BAAM3B,UAAU,gBAAhB,eAEA,4BAAQA,UAAU,WAAWoC,QAAS,EAAK5B,YAA3C,eArEN,EAAKE,MAAQ,CACTW,MAAO,GACPM,WAAW,EACXhB,YAAY,GALG,E,UAFG0B,IAAMC,WCMjBC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACL6B,QAAQ7B,MAAMA,EAAM8B,c","file":"static/js/main.2c6eb5aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst UserCard = (props) => {\r\n\r\n    return(\r\n        <div className=\"user-card\">\r\n            <img className=\"user-img\" src={props.picUrl}/>\r\n\r\n            <span>\r\n                {props.firstName} {props.lastName}\r\n            </span>\r\n\r\n            <span> {props.email} </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCard;","import React from 'react';\r\nimport './style.css';\r\nimport UserCard from \"../usercard/usercard.js\"\r\n\r\nclass UserGallery extends React.Component { \r\n\r\n    constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        users: [],\r\n        isLoading: false,\r\n        currentPage:0\r\n\r\n         }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.fetchUsers();\r\n    }\r\n\r\n    fetchUsers = () => {\r\n        const pageToFetch = this.state.currentPage +1;\r\n\r\n        const url = `https://reqres.in/api/users?page=${pageToFetch}`\r\n\r\n        this.setLoading(true);\r\n\r\n        fetch(url, {\r\n            method:\"GET\"\r\n        })\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((result) => {\r\n            const prevUsers = [...this.state.users, ...result.data]\r\n\r\n            this.setState({\r\n                users: prevUsers,\r\n                currentPage: pageToFetch\r\n            })\r\n\r\n            this.setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n            this.setLoading(false)\r\n        })\r\n    }\r\n\r\n    setLoading = (status) => {\r\n        this.setState({\r\n            isLoading:status\r\n        })\r\n    }\r\n\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"container\">\r\n                <p className=\"title\"><u>User Gallery</u></p>\r\n\r\n                <div className=\"show-area\">\r\n                    {this.state.users.map((user) => {\r\n                        return(\r\n                            <UserCard\r\n                                key={user.id}\r\n                                picUrl ={user.avatar}\r\n                                firstName={user.first_name}\r\n                                lastName={user.last_name}\r\n                                email={user.email}\r\n                                />\r\n                        )\r\n                        \r\n                    })}\r\n                </div>\r\n                {this.state.isLoading ? (\r\n          <span className=\"loading-text\">Loading ...</span>\r\n        ) : (\r\n          <button className=\"load-btn\" onClick={this.fetchUsers}>\r\n            Load More\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default UserGallery;","import React from 'react';\nimport './App.css';\nimport UserGallery from './Components/usergallery/usergallery';\n\nfunction App() {\n  return (\n    <UserGallery/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}